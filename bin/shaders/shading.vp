#version 120

varying vec4 vPos;
varying vec3 vNrm;

//Brack
const vec4 bambi=vec4(0.00f, 0.00f, 0.00f, 0.00f);
const vec4 bdiff=vec4(0.07f,0.05f,0.06f,1.00f);
const vec4 bspec=vec4(0.42f,0.35f,0.30f,1.00f);

//Brown1
//const vec4 bambi=vec4(0.00f, 0.00f, 0.00f, 0.00f);
//const vec4 bdiff=vec4(0.25f,0.15f,0.12f,1.00f);
//const vec4 bspec=vec4(0.71f,0.52f,0.34f,1.00f);

//Brown2
//const vec4 bambi=vec4(0.00f, 0.00f, 0.00f, 0.00f);
//const vec4 bdiff=vec4(0.32f,0.25f,0.20f,1.00f);
//const vec4 bspec=vec4(0.40f,0.31f,0.25f,1.00f);

const vec4 lpos=vec4(0.0f, 0.0f, 2.0f, 0.0f);//(2.0f, 4.0f, 2.0f, 0.0f)
const vec4 lambi=vec4(0.3f, 0.3f, 0.3f, 1.0f);
const vec4 ldiff=vec4(1.0f, 1.0f, 1.0f, 1.0f);
const vec4 lspec=vec4(1.0f, 1.0f, 1.0f, 1.0f);

void main() {
	vPos = gl_ModelViewMatrix*gl_Vertex;
	vNrm = normalize(gl_NormalMatrix*gl_Normal);	// 描画時に法線ベクトルに接線ベクトル情報を格納しておく

	gl_Position = ftransform();
	//gl_TexCoord[0] = gl_TextureMatrix[0] * gl_ModelViewMatrix * gl_Vertex;

	// 視点->頂点ベクトル
	vec3 E = normalize(vPos.xyz);
	vec3 L = normalize(lpos.xyz-vPos.xyz);	// 光源ベクトル

	// Kajiya-kayモデル
	float dnl = dot(vNrm, L);//cosθ
	float dne = dot(vNrm, E);//cosΦ

	float nnl=sqrt(1-dnl*dnl);//sinθ
	float nne=sqrt(1-dne*dne);//sinΦ

	float spec = dne*dnl+nne*nnl;
	//spec *= spec;	// 2乗
	//spec *= spec;	// 4乗
	//spec *= spec;	// 8乗
	spec = pow(max(spec, 0.0), 80.0);
	
	// Kajiya-kay拡散反射成分
	vec3 Adiff = bdiff.xyz*nnl;		// Kd sinθ = Kd |n×l|
	// Kajiya-Kay鏡面反射成分
	vec3 Aspec = bspec.xyz*spec;	// Ks (cosγ)^n = Ks(cosφcosθ-sinφsinθ)^n
	//環境光成分
	vec3 Aambi=bambi.xyz*lambi.xyz;

	gl_FrontColor.rgb = Adiff+Aspec+Aambi;//ランバート拡散項を追加するといくらか不自然に感じたため、除いている

	gl_FrontColor.a = 1.0;
}



